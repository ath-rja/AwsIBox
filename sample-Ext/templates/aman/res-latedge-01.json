{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "LambdaAtEdgeAddHeaders": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Fn::FindInMap": [
                                {
                                    "Ref": "EnvShort"
                                },
                                {
                                    "Ref": "AWS::Region"
                                },
                                "LambdaAtEdgeAddHeadersEnabled"
                            ]
                        },
                        "None"
                    ]
                }
            ]
        },
        "LambdaAtEdgeAddHeadersVersion": {
            "Fn::Or": [
                {
                    "Condition": "LambdaAtEdgeAddHeadersVersionA"
                },
                {
                    "Condition": "LambdaAtEdgeAddHeadersVersionB"
                }
            ]
        },
        "LambdaAtEdgeAddHeadersVersionA": {
            "Fn::Equals": [
                {
                    "Ref": "LambdaAtEdgeAddHeadersVersion"
                },
                "A"
            ]
        },
        "LambdaAtEdgeAddHeadersVersionB": {
            "Fn::Equals": [
                {
                    "Ref": "LambdaAtEdgeAddHeadersVersion"
                },
                "B"
            ]
        },
        "LambdaAtEdgeAddHeadersVersionOverride": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "LambdaAtEdgeAddHeadersVersion"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "res-latedge-01 [res]",
    "Mappings": {
        "dev": {
            "eu-central-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "eu-west-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "us-east-1": {
                "LambdaAtEdgeAddHeadersEnabled": true
            }
        },
        "prd": {
            "eu-central-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "eu-west-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "us-east-1": {
                "LambdaAtEdgeAddHeadersEnabled": true
            }
        },
        "stg": {
            "eu-central-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "eu-west-1": {
                "LambdaAtEdgeAddHeadersEnabled": "None"
            },
            "us-east-1": {
                "LambdaAtEdgeAddHeadersEnabled": true
            }
        }
    },
    "Outputs": {
        "BrandDomain": {
            "Value": "aman.arda"
        },
        "Env": {
            "Value": {
                "Ref": "Env"
            }
        },
        "EnvRole": {
            "Value": {
                "Ref": "EnvRole"
            }
        },
        "EnvStackVersion": {
            "Value": {
                "Ref": "EnvStackVersion"
            }
        },
        "LambdaAtEdgeAddHeadersVersion": {
            "Condition": "LambdaAtEdgeAddHeadersVersion",
            "Value": {
                "Fn::If": [
                    "LambdaAtEdgeAddHeadersVersionA",
                    {
                        "Ref": "LambdaAtEdgeAddHeadersVersionA"
                    },
                    {
                        "Ref": "LambdaAtEdgeAddHeadersVersionB"
                    }
                ]
            }
        },
        "StackType": {
            "Value": "res"
        }
    },
    "Parameters": {
        "Env": {
            "AllowedValues": [
                "dev",
                "stg",
                "prod"
            ],
            "Default": "dev",
            "Description": "Environment",
            "Type": "String"
        },
        "EnvRole": {
            "AllowedPattern": "^[a-zA-Z0-9-_.]*$",
            "Default": "",
            "Description": "Service Role",
            "Type": "String"
        },
        "EnvShort": {
            "AllowedValues": [
                "dev",
                "stg",
                "prd"
            ],
            "Default": "dev",
            "Description": "Environment Short - NEVER CHANGE!",
            "Type": "String"
        },
        "EnvStackVersion": {
            "Default": "1",
            "Description": "Stack version, if changed with UpdateMode=Cfn triggers cfn-hup",
            "Type": "String"
        },
        "LambdaAtEdgeAddHeadersVersion": {
            "AllowedValues": [
                "",
                "A",
                "B"
            ],
            "Default": "",
            "Description": "LambdaVersion change between A/B to force deploy new version",
            "Type": "String"
        }
    },
    "Resources": {
        "LambdaAtEdgeAddHeaders": {
            "Condition": "LambdaAtEdgeAddHeaders",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "'use strict';\n",
                                "\n",
                                "const cachecontrol =\n",
                                "\"",
                                7776000,
                                "\"",
                                ";\n",
                                "\n",
                                "const headerCacheControl = [{key: 'cache-control', value: 'max-age=' + cachecontrol}];\n",
                                "const headerXRobotsTag = [{ key: 'x-robots-tag', value: 'noindex, follow' }];\n",
                                "\n",
                                "exports.lambda_handler = (event, context, callback) => {\n",
                                "    const response = event.Records[0].cf.response;\n",
                                "    const request = event.Records[0].cf.request;\n",
                                "    const headers = response.headers;\n",
                                "\n",
                                "    if ( response.status.startsWith('2') ) {\n",
                                "      if ( request.uri.startsWith('/sitemap/') ) {\n",
                                "        headers['x-robots-tag'] = headerXRobotsTag;\n",
                                "      } else {\n",
                                "        headers['cache-control'] = headerCacheControl;\n",
                                "      }\n",
                                "    }\n",
                                "\n",
                                "    callback(null, response);\n",
                                "};\n"
                            ]
                        ]
                    }
                },
                "Description": "Lambda@Edge add Headers",
                "Environment": {
                    "Variables": {}
                },
                "FunctionName": {
                    "Fn::Sub": "${AWS::StackName}-${EnvRole}-AtEdgeAddHeaders"
                },
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "RoleLambdaAtEdgeAddHeaders",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": 10
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaAtEdgeAddHeadersVersionA": {
            "Condition": "LambdaAtEdgeAddHeadersVersionA",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaAtEdgeAddHeaders"
                }
            },
            "Type": "AWS::Lambda::Version"
        },
        "LambdaAtEdgeAddHeadersVersionB": {
            "Condition": "LambdaAtEdgeAddHeadersVersionB",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaAtEdgeAddHeaders"
                }
            },
            "Type": "AWS::Lambda::Version"
        },
        "RoleLambdaAtEdgeAddHeaders": {
            "Condition": "LambdaAtEdgeAddHeaders",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    "edgelambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
