{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "EventsRuleEC2NotificationStateOverride": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EventsRuleEC2NotificationState"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "res-event-01 [res]",
    "Outputs": {
        "BrandDomain": {
            "Value": "numenor.arda"
        },
        "Env": {
            "Value": {
                "Ref": "Env"
            }
        },
        "EnvRole": {
            "Value": {
                "Ref": "EnvRole"
            }
        },
        "EnvStackVersion": {
            "Value": {
                "Ref": "EnvStackVersion"
            }
        },
        "EventsRuleEC2NotificationState": {
            "Value": {
                "Fn::If": [
                    "EventsRuleEC2NotificationStateOverride",
                    {
                        "Ref": "EventsRuleEC2NotificationState"
                    },
                    "ENABLED"
                ]
            }
        },
        "LambdaR53RecordInstanceId": {
            "Export": {
                "Name": "LambdaR53RecordInstanceId"
            },
            "Value": {
                "Fn::GetAtt": [
                    "LambdaR53RecordInstanceId",
                    "Arn"
                ]
            }
        },
        "LambdaServiceDiscovery": {
            "Export": {
                "Name": "LambdaServiceDiscovery"
            },
            "Value": {
                "Fn::GetAtt": [
                    "LambdaServiceDiscovery",
                    "Arn"
                ]
            }
        },
        "StackType": {
            "Value": "res"
        }
    },
    "Parameters": {
        "Env": {
            "AllowedValues": [
                "dev",
                "stg",
                "prod"
            ],
            "Default": "dev",
            "Description": "Environment",
            "Type": "String"
        },
        "EnvRole": {
            "AllowedPattern": "^[a-zA-Z0-9-_.]*$",
            "Default": "",
            "Description": "Service Role",
            "Type": "String"
        },
        "EnvShort": {
            "AllowedValues": [
                "dev",
                "stg",
                "prd"
            ],
            "Default": "dev",
            "Description": "Environment Short - NEVER CHANGE!",
            "Type": "String"
        },
        "EnvStackVersion": {
            "Default": "1",
            "Description": "Stack version, if changed with UpdateMode=Cfn triggers cfn-hup",
            "Type": "String"
        },
        "EventsRuleEC2NotificationState": {
            "AllowedValues": [
                "",
                "DISABLED",
                "ENABLED"
            ],
            "Default": "",
            "Description": "Events Rule State - empty for default based on env/role",
            "Type": "String"
        }
    },
    "Resources": {
        "EventsRuleEC2Notification": {
            "Properties": {
                "Description": "EC2 Instance State-change Notification",
                "EventPattern": {
                    "detail": {
                        "state": [
                            "running",
                            "shutting-down"
                        ]
                    },
                    "detail-type": [
                        "EC2 Instance State-change Notification"
                    ],
                    "source": [
                        "aws.ec2"
                    ]
                },
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-${EnvRole}-RuleEC2Notification"
                },
                "State": {
                    "Fn::If": [
                        "EventsRuleEC2NotificationStateOverride",
                        {
                            "Ref": "EventsRuleEC2NotificationState"
                        },
                        "ENABLED"
                    ]
                },
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaServiceDiscovery",
                                "Arn"
                            ]
                        },
                        "Id": "TargetFunction-01"
                    },
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaR53RecordInstanceId",
                                "Arn"
                            ]
                        },
                        "Id": "TargetFunction-02"
                    }
                ]
            },
            "Type": "AWS::Events::Rule"
        },
        "IAMPolicyLambdaR53RecordInstanceId": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sns:Publish"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::ImportValue": "SNSTopicASGNotificationR53"
                            }
                        },
                        {
                            "Action": [
                                "route53:ChangeResourceRecordSets",
                                "route53:ListResourceRecordSets"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:route53:::*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "LambdaR53RecordInstanceId",
                "Roles": [
                    {
                        "Ref": "RoleLambdaR53RecordInstanceId"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "IAMPolicyLambdaServiceDiscovery": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "servicediscovery:ListServices",
                                "servicediscovery:CreateService",
                                "servicediscovery:DeleteService",
                                "servicediscovery:RegisterInstance",
                                "servicediscovery:DeRegisterInstance",
                                "servicediscovery:GetOperation",
                                "servicediscovery:GetNameSpace"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "route53:ChangeResourceRecordSets"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:route53:::*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "LambdaServiceDiscovery",
                "Roles": [
                    {
                        "Ref": "RoleLambdaServiceDiscovery"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "LambdaPermissionR53RecordInstanceIdEventsRuleEC2Notification": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaR53RecordInstanceId",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EventsRuleEC2Notification",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "LambdaPermissionServiceDiscoveryEventsRuleEC2Notification": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaServiceDiscovery",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EventsRuleEC2Notification",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "LambdaR53RecordInstanceId": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "# vim: ft=python expandtab shiftwidth=2 softtabstop=2\n",
                                "from __future__ import print_function\n",
                                "import json\n",
                                "import logging\n",
                                "import os\n",
                                "import boto3\n",
                                "import time\n",
                                "\n",
                                "logger = logging.getLogger()\n",
                                "logger.setLevel(logging.INFO)\n",
                                "\n",
                                "hostedzonename = os.environ['HostedZoneName'] + '.'\n",
                                "hostedzoneid = os.environ['HostedZoneId']\n",
                                "\n",
                                "\n",
                                "def publish_to_sns(dnsname, asg_name, e_state):\n",
                                "  message = {\n",
                                "    'AutoScalingGroup': asg_name,\n",
                                "    'Event': 'autoscaling:EC2_INSTANCE_LAUNCH' if e_state == 'runnig' else 'autoscaling:EC2_INSTANCE_TERMINATE',\n",
                                "    'DnsName': dnsname,\n",
                                "  }\n",
                                "  sns = boto3.client('sns')\n",
                                "  sns.publish(\n",
                                "    TopicArn=os.environ['Topic'],\n",
                                "    Subject='ASGNotificationR53',\n",
                                "    Message=json.dumps(message)\n",
                                "  )\n",
                                "\n",
                                "\n",
                                "def do_upsert_record_set(route53, instance, zonename, hostedzoneid):\n",
                                "  r53_response = route53.change_resource_record_sets(\n",
                                "    HostedZoneId=hostedzoneid,\n",
                                "    ChangeBatch={'Changes': [{\n",
                                "      'Action': 'UPSERT',\n",
                                "      'ResourceRecordSet': {\n",
                                "        'Name': '{name}.{domain}'.format(name=instance.instance_id, domain=zonename),\n",
                                "        'Type': 'CNAME',\n",
                                "         'TTL': 300,\n",
                                "         'ResourceRecords': [{'Value': instance.private_dns_name}]\n",
                                "      }\n",
                                "    }]}\n",
                                "  )\n",
                                "\n",
                                "\n",
                                "def do_delete_record_set(route53, hostedzoneid, r53_resource_record):\n",
                                "  r53_response = route53.change_resource_record_sets(\n",
                                "    HostedZoneId=hostedzoneid,\n",
                                "    ChangeBatch={'Changes': [{\n",
                                "      'Action': 'DELETE',\n",
                                "      'ResourceRecordSet': r53_resource_record\n",
                                "    }]}\n",
                                "  )\n",
                                "\n",
                                "\n",
                                "def get_record_set(route53, instance, zonename, hostedzoneid):\n",
                                "  r53_resource_records = route53.list_resource_record_sets(\n",
                                "    HostedZoneId=hostedzoneid,\n",
                                "    StartRecordName='{name}.{domain}'.format(name=instance.instance_id, domain=zonename),\n",
                                "    StartRecordType='CNAME',\n",
                                "    MaxItems='1')['ResourceRecordSets']\n",
                                "\n",
                                "  if len(r53_resource_records) < 1:\n",
                                "    return\n",
                                "\n",
                                "  r53_resource_record=r53_resource_records[0]\n",
                                "\n",
                                "  if r53_resource_record['Name'] != '{name}.{domain}'.format(\n",
                                "    name=instance.instance_id, domain=zonename):\n",
                                "    return\n",
                                "\n",
                                "  return(r53_resource_record)\n",
                                "\n",
                                "\n",
                                "def get_asg_name(tags):\n",
                                "  asgName = None\n",
                                "  stackName = None\n",
                                "  parsedTags = None\n",
                                "  while not parsedTags or (stackName and not asgName):\n",
                                "    time.sleep(0.5)\n",
                                "    for n in tags:\n",
                                "      if n['Key'] == 'aws:cloudformation:stack-name':\n",
                                "        stackName = n['Value']\n",
                                "      if n['Key'] == 'EnvStackName':\n",
                                "        stackName = n['Value']\n",
                                "      if n['Key'] == 'aws:autoscaling:groupName':\n",
                                "        asgName = n['Value']\n",
                                "      if n['Key'] == 'launched-for-asg':\n",
                                "        asgName = n['Value']\n",
                                "    parsedTags = True\n",
                                "\n",
                                "  return asgName\n",
                                "\n",
                                "\n",
                                "def lambda_handler(event, context):\n",
                                "  e_state = event['detail']['state']\n",
                                "  ec2id = event['detail']['instance-id']\n",
                                "  logger.info(e_state + ' ' + ec2id)\n",
                                "\n",
                                "  ec2res = boto3.resource('ec2')\n",
                                "  instance = ec2res.Instance(ec2id)\n",
                                "  logger.info(instance)\n",
                                "  if not instance.tags:\n",
                                "    return\n",
                                "\n",
                                "  asg_name = get_asg_name(instance.tags)\n",
                                "  if not asg_name:\n",
                                "    return\n",
                                "  logger.info(asg_name)\n",
                                "  \n",
                                "  route53 = boto3.client('route53')\n",
                                "\n",
                                "  if e_state == 'running':\n",
                                "    logger.info('Updating/Creating Route53 Record')\n",
                                "    do_upsert_record_set(route53, instance, hostedzonename, hostedzoneid)\n",
                                "\n",
                                "  if e_state == 'shutting-down':\n",
                                "    logger.info('Searching for Route53 Record info')\n",
                                "    r53_resource_record = get_record_set(route53, instance, hostedzonename, hostedzoneid)\n",
                                "    if not r53_resource_record:\n",
                                "      return\n",
                                "\n",
                                "    logger.info('Publishing to SNS')\n",
                                "    dnsname = r53_resource_record['ResourceRecords'][0]['Value']\n",
                                "    publish_to_sns(dnsname, asg_name, e_state)\n",
                                "\n",
                                "    logger.info('Deleting Route53 Record: ' + r53_resource_record['Name'])\n",
                                "    do_delete_record_set(route53, hostedzoneid, r53_resource_record)\n",
                                "\n",
                                "  return\n"
                            ]
                        ]
                    }
                },
                "Description": "R53 Record InstanceId Automatic Creation",
                "Environment": {
                    "Variables": {
                        "HostedZoneId": {
                            "Fn::ImportValue": "HostedZoneIdPrivate"
                        },
                        "HostedZoneName": "internal.numenor.arda",
                        "Topic": {
                            "Fn::ImportValue": "SNSTopicASGNotificationR53"
                        }
                    }
                },
                "FunctionName": {
                    "Fn::Sub": "${AWS::StackName}-${EnvRole}-R53RecordInstanceId"
                },
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "RoleLambdaR53RecordInstanceId",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaServiceDiscovery": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "# vim: ft=python expandtab shiftwidth=2 softtabstop=2\n",
                                "import boto3\n",
                                "import logging\n",
                                "import os\n",
                                "import json\n",
                                "import time\n",
                                "logger = logging.getLogger()\n",
                                "logger.setLevel(logging.INFO)\n",
                                "\n",
                                "def get_servicename(tags):\n",
                                "  role = None\n",
                                "  stackname = None\n",
                                "  parsedTags = None\n",
                                "  while not parsedTags or (stackname and not role):\n",
                                "    time.sleep(0.5)\n",
                                "    for n in tags:\n",
                                "      if n['Key'] == 'EnvRole':\n",
                                "        role = n['Value']\n",
                                "      if n['Key'] == 'aws:cloudformation:stack-name':\n",
                                "        stackname = n['Value']\n",
                                "      if n['Key'] == 'EnvStackName':\n",
                                "        stackname = n['Value']\n",
                                "    parsedTags = True\n",
                                "  if role and stackname:\n",
                                "    return(stackname + '.' + role)\n",
                                "\n",
                                "def get_service(client, namespaceid, servicename):\n",
                                "  service = {}\n",
                                "  paginator = client.get_paginator('list_services')\n",
                                "  response_iterator = paginator.paginate(\n",
                                "    Filters=[{'Name': 'NAMESPACE_ID', 'Values': [namespaceid]}]\n",
                                "  )\n",
                                "  for n in response_iterator:\n",
                                "    for s in n['Services']:\n",
                                "      if s['Name'] == servicename:\n",
                                "        service['Id'] = s['Id']\n",
                                "        #service['InstanceCount'] = s['InstanceCount']\n",
                                "        return(service)\n",
                                "\n",
                                "def create_service(client, namespaceid, servicename):\n",
                                "  response = client.create_service(\n",
                                "    Name=servicename,\n",
                                "    DnsConfig={\n",
                                "      'NamespaceId': namespaceid,\n",
                                "      'DnsRecords': [{'Type': 'A', 'TTL': 300}]\n",
                                "    }\n",
                                "  )\n",
                                "\n",
                                "  return(response['Service']['Id'])\n",
                                "\n",
                                "def register_instance(client, serviceid, instance):\n",
                                "  response = client.register_instance(\n",
                                "    ServiceId=serviceid,\n",
                                "    InstanceId=instance.instance_id,\n",
                                "    Attributes={\n",
                                "      'AWS_INSTANCE_IPV4': instance.private_ip_address\n",
                                "    }\n",
                                "  )\n",
                                "\n",
                                "  return(response)\n",
                                "\n",
                                "def do_upsert_record_set(client, aliasname, hostedzoneid, namespace_hostedzoneid, action):\n",
                                "  response = client.change_resource_record_sets(\n",
                                "    HostedZoneId=hostedzoneid,\n",
                                "    ChangeBatch={'Changes': [{\n",
                                "      'Action': action,\n",
                                "      'ResourceRecordSet': {\n",
                                "        'Name': aliasname,\n",
                                "        'Type': 'A',\n",
                                "        'AliasTarget': {\n",
                                "          'DNSName': aliasname,\n",
                                "          'HostedZoneId': namespace_hostedzoneid,\n",
                                "          'EvaluateTargetHealth': True,\n",
                                "        }\n",
                                "      }\n",
                                "   }]}\n",
                                "  )\n",
                                "\n",
                                "def lambda_handler(event, context):\n",
                                "  namespaceid = os.environ['NameSpaceID']\n",
                                "  e_state = event['detail']['state']\n",
                                "  ec2id = event['detail']['instance-id']\n",
                                "  logger.info(e_state + ' ' + ec2id)\n",
                                "\n",
                                "  discoveryclient = boto3.client('servicediscovery')\n",
                                "  r53client = boto3.client('route53')\n",
                                "  ec2res = boto3.resource('ec2')\n",
                                "\n",
                                "  instance = ec2res.Instance(ec2id)\n",
                                "  logger.info(instance)\n",
                                "  if not instance.tags:\n",
                                "    return\n",
                                "\n",
                                "  servicename = get_servicename(instance.tags)\n",
                                "  if not servicename:\n",
                                "    return\n",
                                "  logger.info(servicename)\n",
                                "\n",
                                "  service = get_service(discoveryclient, namespaceid, servicename)\n",
                                "  namespace_hostedzoneid = discoveryclient.get_namespace(Id=namespaceid)['Namespace']['Properties']['DnsProperties']['HostedZoneId']\n",
                                "  hostedzoneid = os.environ['HostedZoneId']\n",
                                "  aliasname = servicename + '.' + os.environ['PublicDnsNamespaceName']\n",
                                "\n",
                                "  if e_state == 'running':\n",
                                "    serviceid = service['Id'] if service else create_service(discoveryclient, namespaceid, servicename)\n",
                                "    logger.info(serviceid)\n",
                                "    do_upsert_record_set(r53client, aliasname, hostedzoneid, namespace_hostedzoneid, 'UPSERT')\n",
                                "    registration = register_instance(discoveryclient, serviceid, instance)\n",
                                "    response = discoveryclient.get_operation(OperationId=registration['OperationId'])\n",
                                "    logger.info(response)\n",
                                "\n",
                                "  if service and e_state == 'shutting-down':\n",
                                "    discoveryclient.deregister_instance(ServiceId=service['Id'], InstanceId=instance.instance_id)\n",
                                "    service = get_service(discoveryclient, namespaceid, servicename)\n",
                                "    #if service['InstanceCount'] == 0:\n",
                                "    #  do_upsert_record_set(r53client, aliasname, hostedzoneid, namespace_hostedzoneid, 'DELETE')\n",
                                "    #  discoveryclient.delete_service(Id=service['Id'])\n",
                                "\n",
                                "  return\n"
                            ]
                        ]
                    }
                },
                "Description": "ServiceDiscovery",
                "Environment": {
                    "Variables": {
                        "HostedZoneId": {
                            "Fn::ImportValue": "HostedZoneIdEnv"
                        },
                        "NameSpaceID": {
                            "Fn::ImportValue": "ServiceDiscoveryPublicDnsNamespaceId"
                        },
                        "PublicDnsNamespaceName": {
                            "Fn::Sub": "find.${EnvShort}.numenor.arda"
                        }
                    }
                },
                "FunctionName": {
                    "Fn::Sub": "${AWS::StackName}-${EnvRole}-ServiceDiscovery"
                },
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "RoleLambdaServiceDiscovery",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "RoleLambdaR53RecordInstanceId": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "RoleLambdaServiceDiscovery": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
