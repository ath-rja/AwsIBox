elasticsearch:
  StackType: ec2
  StackName: els
  Condition:
    - BucketRO:
        Not(Equals(get_endvalue('BucketRO'), 'None'))
  Alarm:
    - CPUHigh:
        EvaluationPeriods: 0
    - CPULow:
        EvaluationPeriods: 0
  Apps: []
  BucketRO: None
  EventsRule:
    - ElasticSearchSnapShot:
        Description: 'Periodically invoke LambdaElasticSearchSnapShot'
        ScheduleExpression: 'cron(15 2 * * ? *)'
        State: 'ENABLED'
        Targets:
          - LambdaElasticSearchSnapShot:
              Arn: GetAtt('LambdaElasticSearchSnapShot', 'Arn')
              Id: 'TargetFunction-01'
  HealthCheckTarget: HTTP:9200/
  HealthCheckType: EC2
  Lambda:
    - ElasticSearchSnapShot:
        Description: 'ElasticSearch SnapShot'
        MemorySize: 128
        Runtime: python2.7
        SecurityGroupIds: [get_expvalue('SecurityGroupElasticSearch')]
        SubnetIds: Split(',', get_expvalue('SubnetsPrivate'))
        Timeout: 10
        Variables:
          - AutoScalingGroup: Ref('AutoScalingGroup')
          - BucketElasticSearch: Sub(get_endvalue('BucketElasticSearch'))
          - Region: Ref('AWS::Region')
          - StackName: Ref('AWS::StackName')
  Listeners:
    - 1:
        InstancePort: 9200
        LoadBalancerAccess: Private
        LoadBalancerPort: 9200
        Protocol: HTTP
    - 2:
        InstancePort: 5601
        LoadBalancerAccess: Private
        LoadBalancerPort: 5601
        Protocol: TCP
  LoadBalancerClassic: ['External', 'Internal']
  IAMPolicy:
    - ESSnapshot:
        Roles:
          - Ref('RoleInstance')
        Statement:
          - 1:
              Action:
                - 's3:CreateBucket'
                - 's3:ListBucket'
                - 's3:GetBucketLocation'
                - 's3:ListBucketMultipartUploads'
                - 's3:ListBucketVersions'
              Resource: Sub('arn:aws:s3:::' + str(get_endvalue('BucketElasticSearch')))
          - 2:
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
                - 's3:AbortMultipartUpload'
                - 's3:ListMultipartUploadParts'
              Resource: Sub('arn:aws:s3:::' + str(get_endvalue('BucketElasticSearch')) + '/*')
    - ESSnapshotRO:
        Condition: BucketRO
        Roles:
          - Ref('RoleInstance')
        Statement:
          - 1:
              Action:
                - 's3:ListBucket'
                - 's3:GetBucketLocation'
                - 's3:ListBucketMultipartUploads'
                - 's3:ListBucketVersions'
              Resource: get_subvalue('arn:aws:s3:::${1M}', 'BucketRO')
          - 2:
              Action:
                - 's3:GetObject'
                - 's3:ListMultipartUploadParts'
              Resource: get_subvalue('arn:aws:s3:::${1M}/*', 'BucketRO')
  SecurityGroups: 'BaseInstance,ElasticSearch,None,None'
  SecurityGroupIngress:
    - ElasticSearchClient:
        FromPort: 9200
        GroupId: Sub('${SecurityGroupLoadBalancer.GroupId}')
        SourceSecurityGroupId: get_expvalue('SecurityGroupElasticSearch')
        ToPort: 9200
    - ElasticSearchClientOnInstance:
        FromPort: 9200
        GroupId: Sub('${SecurityGroupInstancesRules.GroupId}')
        SourceSecurityGroupId: get_expvalue('SecurityGroupElasticSearch')
        ToPort: 9200
    - ElasticSearchCluster:
        FromPort: 9300
        GroupId: Sub('${SecurityGroupInstancesRules.GroupId}')
        SourceSecurityGroupId: Ref('SecurityGroupInstancesRules')
        ToPort: 9400
  VolumeSize: 50

dev: &cfg_dev
  Capacity:
    Desired: 2
    Max: 3
  HealthCheckType: ELB
  InstanceType: t3.medium
  ScheduledAction:
    - Down:
        DesiredSize: 1

stg:
  <<: *cfg_dev

prd:
  CapacityDesired: 3
  InstanceType: c5.2xlarge
  ScheduledAction:
    - Down:
        DesiredSize: 2
