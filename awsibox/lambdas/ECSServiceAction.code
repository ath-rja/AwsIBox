# vim: ft=python
import boto3
import os
import logging
from datetime import datetime, timedelta, tzinfo

logger = logging.getLogger()
logger.setLevel(logging.INFO)

REASONS = [
    'RESOURCE:MEMORY',
    'RESOURCE:CPU'
]


def getAsg():
    global asg

    ecs = boto3.client('ecs')
    asg = boto3.client('autoscaling')
    response = ecs.describe_container_instances(
        cluster=cluster, containerInstances=[container])

    if response['containerInstances']:
        ec2InstanceId = response['containerInstances'][0]['ec2InstanceId']

        response = asg.describe_auto_scaling_instances(
            InstanceIds=[ec2InstanceId])

        if response['AutoScalingInstances']:
            return response['AutoScalingInstances'][0]['AutoScalingGroupName']


def getAlarm():
    asgName = getAsg()
    if not asgName:
        return

    response = asg.describe_policies(
        AutoScalingGroupName=asgName, PolicyTypes=['TargetTrackingScaling'])

    if response['ScalingPolicies']:
        for a in response['ScalingPolicies'][0]['Alarms']:
            if f'{asgName}-AlarmHigh-' in a['AlarmName']:
                return a['AlarmName']


def buildStateReasonData(alarmName):
    global cws
    cws = boto3.client('cloudwatch')

    response = cws.describe_alarms(AlarmNames=[alarmName])
    if response['MetricAlarms']:
        alarm = response['MetricAlarms'][0]
        unit = alarm['Unit']
        period = alarm['Period']
        statistic = alarm['Statistic']
        threshold = alarm ['Threshold']
        evaluationPeriods = alarm['EvaluationPeriods']
        stateReasonData = {
            'version': '1.0',
            'queryDate': datetime.utcnow().strftime('%Y-%m-%dT%X.000+0000'),
            'startDate': (datetime.utcnow() - timedelta(
                seconds=period*evaluationPeriods)).strftime(
                    '%Y-%m-%dT%X.000+0000'),
            'unit': unit,
            'statistic': statistic,
            'period': period,
            'recentDatapoints': [
                threshold + 1 for n in range(evaluationPeriods)],
            'threshold': threshold,
        }

        return stateReasonData


def raiseAlarm(reason):
    alarm = getAlarm()
    if not alarm:
        return
    stateReasonData = buildStateReasonData(alarm)
    logger.info(stateReasonData)
    return
    if alarm:
        result = cws.set_alarm_state(
            AlarmName=alarm, StateValue='ALARM',
            StateReason=f'SERVICE_TASK_PLACEMENT_FAILURE-{reason}',
            StateReasonData=stateReasonData,
        )


def lambda_handler(event, context):
    global container
    global cluster

    detail = event['detail']

    try:
        eventType = detail['eventType']
        reason = detail['reason']
    except:
        return

    if eventType == 'ERROR' and any(reason in e for e in REASONS):
        logger.info(event)
        cluster = detail['clusterArn']
        for c in detail['containerInstanceArns']:
            container = c
            raiseAlarm(reason)

    return
